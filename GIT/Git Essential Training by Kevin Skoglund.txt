Understanding version control:

Git is software that keeps track of changes that you make to files and directories, and it is especially good in keeping track of text changes that you make.

Because what it does is manage versions for you, Git is referred to as a Version Control System or VCS for short. 

About distributed version control:

Git is Distributed Version Control, different users --or teams of users--each maintain their own repositories instead of working from a central repository. And the changes are stored as change sets or patches, and we're focused on tracking changes not the versions of the document.

SCSS, RCS, CVS, and SVN:
And all four of these use a central code repository model, that is that there is one central place where you store the master copy of your code, and when you're working with the code you check out a copy from the master repository. You work with it make your changes, and then you submit those changes back to the central repository.

Other users can also work from that repository submitting their changes. And it's up to us as users to keep up-to-date with whatever is happening in that central code repository, to make sure that we pull down and update any changes that other people have made.

Git doesn't work that way, Git is Distributed Version Control, different users --or teams of users--each maintain their own repositories instead of working from a central repository. And the changes are stored as change sets or patches, and we're focused on tracking changes not the versions of the document.

Now that's a subtle difference, you may think, well, CVS and SVN those track changes too, they don't. They track the changes that it takes to Git from version-to-version of each of the different files or the different states of a directory. Git doesn't work that way, Git really focuses on these change sets in encapsulating a change set as a discrete unit and then those change sets can be exchanged between repositories.

We're not trying to keep up-to-date with the latest version of something instead the question is, do we have a change set applied or not? So there is no single master repository, there is just many working copies each with their own combination of change sets. Let me give an illustration to make this clear.

And if you decide you don't like the way that a open source project is going, you can fork it, take it to a completely different direction and say, you know what, I'm going to just make a clean break and make my repository now the one that I'm going to work from, all of my changes will be submitted to there, and I can still pull change sets from the master one into my project whenever I want. But I don't have to, I can go my own way. That becomes a really powerful and flexible feature that's well suited to collaboration between teams especially loose groups of distributed developers like you have in the open source world. Distributed version control is an important part of the Git architecture that you need to keep in mind.


just make sure that you understand that there is no central repository that we were from, all repositories are considered equal by Git, it's just a matter of whether a repository has change sets in it or doesn't.
 
GIT is not a SVN tool, else it is distributed version control tool. So no central repository.


Who should use Git?:

it's really for anyone who wants to track edits, especially edits for text documents. It offers you the ability to review a log of changes that were made, to view differences between versions, and to retrieve old versions. Those features are not just limited to programmers, those are things that anyone working with the text file might want to be able to do.

It doesn't work well with files that have to be interpreted by an application, word processing file, spreadsheets, PDF's, Photoshop PSD's, these kinds of files need an application to interpret them otherwise they're just a bunch of letters and numbers that Git won't understand. 

So Git will again keep track of the fact that you've a Microsoft Word file in version 1 and in version 2, but it won't be able to show you the difference, the text that you changed between those two files.

Git is VCS version control system.
SVN and VCS are different things.


Installing Git on Windows:

The URL for that's http://git-scm.com--the scm, stands for source code management

Artilce for setting up GIT on windows
https://help.github.com/en/articles/set-up-git

GitBash -> Git Unix (Bash is Unix environment)
It is just like unix.

dir	 		for getting directory files

which git 	tells you where git is installed.

git --version	give you version of git installed.


Configuring Git:

We can save configuration on following levels.
1. System level configuration. 
2. User level configuration. 
	it is single user configuration and mostly used. in Windows it is saved at $HOME\.gitconfig
3. Project by project basis.
	they apply only to that specific project
	location is my_project/.git/config
	
command to config these files 
git config --andLevelWhereYouWantToConfi
like
git config --system

User level:
git config --global
i.e global to the user.

Project
git config

For adding User name:
$ git config --global user.name "Vikas Singh"

For adding email:
$ git config --global user.email "vandevikas@gmail.com"

for getting list of configrations done
git config --list

for getting specific config
git config user.name
git config user.email

cat .gitconfig	
will give you what the config file saves

don't know more about it:
git config --global core.editor "notepad.exe"

for setting the colors to the console of git
git config --global color.ui true

Exploring Git auto-completion:
Skipped for Windows as it already has this capability.


git help
will show you all git commands and all

git help andTheCommandForWhichYouNeedHelp


Initializing a repository:

git init
will setup the directory as homebase and make it as a Git repository and track all the files that come and go, changes done in this directory.


Understanding where Git files are stored:
git init command creates a .git directory inside the folder, and this .git folder contains many file and folders with which we don't need to mess.

Only one file is of importance is config, it is project level configrations. We can edit this file as well.

Performing your first commit:
git add .
. is for this directory.
and git add will look for every change in this directory.

git commit -m "Initial Commit"
to add the change in repository or permenent memory.

~Till Now we have not defined the location in GITHUB where this changes will be saved so they might be saved locally.

So the basic process is:
1. make changes.
2. add the changes.
3. commit the changes to the repository with a message.


Writing commit messages:
good descriptive commit message.

commit message in present tense, as this is regarding the change. 


Viewing the commit log:
git log
gives you all the commit logs

git help log -> to get help

git log -n 1 -> will return only one commit comment

git log --since=2012-06-15 -> will return all comments since that date.

git log --until=givenDate -> will return all comments till that date.
 
git log --author="Vikas" -> can give partial name of the specific author.

git log --grep="Any Expression or String in the commit"
grep -> global regular expression search
Will return commit containing that message.
Can be of use if you want to search anything with help of commit.


Exploring the three-trees architecture:

two tree architecture -> other version control system use.

1. repository and 2. working copy.

checkout from repository to working copy.
and commit to repository from working copy.

Git has 3 tree architecture:
1. repository 2. staging index 3. working

staging index is extra in case of GIT.

repository
staging index		2. git commit file.txt
working				1. git add file.txt

we first move the file from working copy to staging index and then commit the file from staging index to repository.

we can skip staging index step that we will learn later.


Git Workflow:
is explained above.


Using hash values (SHA-1):
Change set 

SHA-1 hash algrithm to create checksums.
it creates the commit id. that we see with commit.

Working with the HEAD pointer.

Git maintains a HEAD pointer which is a refrence variable.

only points to current branch in repository and not staging or working copy.

it points to last state of repository.

head always points to latest commit in the repository and for any commit it will add after that making it parent of that commit.

Head is the tip of currently checked out branch in the repository.

git log HEAD 


Adding files:
git status
gives us the difference between working copy, staging index and repository.

it gives the status of staging directory and repository.

Editing files:
same process.
like 
git add fileName.txt

Viewing changes with diff:
In unix diff is used to compair 2 files.

git diff
will compair old version and new version.
i.e will compair the file in repository i.e where the head is pointing at, with the file in our working copy.

- is the line removed in working directory file
+ is lines added in local file

i.e only shows the changes.

also shows line numbers 

git diff -> will show all the changes in all the files.

git diff fileName.txt -> will show only changes in perticular file.


Viewing only staged changes:
Actually
if you edit a file in working directory and do git diff you will see the changes.
But now if you do git add and move this file to staging index and then do git diff then you will see no difference i.e. git diff only compairs files in stagigning and working dir.

git diff --staged
to see difference between staging and repository.

So if you have added your changes by git add and then you want to see the difference then you have to see it in staging index via --staged.

Deleting files:
from repository

2 ways to delete file from repo:
First way:
1. Delete the file manually from working directory.
2. do git status and you will see that file is showing as in red and deleted:
3. use -> git rm fileToDelete.txt
4. git status will now show in green that file is deleted from staging.
5. git commit -m "Commit the deletion changes into the repo"
6. git status will now not show anything about that file.

rm -> remove.
It is just like adding changes just opposite in action, i.e remove changes.

Second Way:
1. git rm fileToDelete.txt
Unix will completely delete the file from your system.
2. git status
You will see a message deleted: fileToDelete.txt
i.e. by git rm fileToDelete we moved to staging area.
3. git commit -m "Removing file from repo"

it is simple way i.e 1. rm file and then 2. commit the deletion step.

Moving and renaming files:
2 Ways:

Just like deletion of file first way is to manually do the step and let git find out what changed.
Second way is to do it via git.

1. Manual Renaming of file:

1. If you rename a file and do git status
than you see that the file you renamed is deleted and the git shows there is one new file added i.e. untracked files is added.

git shows:
deleted: fileIWantToRename.txt
Untracked files: renamedFile.txt

2. Now add that new file to staging.
and remove renamed file.
i.e. 
git add renamedFile.txt
git rm fileIWantToRename.txt

3. git status
will show you that renamedFile.txt is renamed to fileIWantToRename.txt
renamed: xyz.txt -> zyx.txt

4. Now commit the changes.

Second way: Git doing it for you.

1. git mv fileToRename.txt RenamedFile.txt
mv is for move in Unix which is used to rename.

This step will rename the file and will also add the file to staging index.

2. git status will show that file is renamed:

3. commit the changes.


Moving the file to another directory:

1. git mv fileToMove.txt directoryToMove/fileToMove.txt
here we want to keep the name as same for the moved file so we are keeping it same, else we could change name as well.

2. git status 
will show the file is renamed: 
as move and renaming is almost same thing.

also mv will do moving at working copy as well as staging index.

3. commit it.


Real World Exposure:

Introducing the Explore California web site

dir -> to see all the files and folders in a folder.

cd folderName -> to go into the folder.


git diff 
shows
@@ -71,7 +71,7 @@ 
which is actually line number with number of lines i.e at line number 71 with count of 7 line will be shown in diff.

git diff --color-words fileName.txt
It will show difference in same line instead of differnet lines as one red and one green.
now both red and green will be on same line.


adding files from working directory to repo directiory, and staging index in single line.

git commit -am ""

is like:
git add .
git commit -m ""

Points to remember:
1. All modified files will be committed. commit of selected files via this method is not possible.

2. Renaming/Deletion/Moving don't work.
Untracked files are also not included.


if you are at (git bash is at) abc directory and want to add files from abc\xyz directory then you can do is

git add xyz/

you can put * after xyz/ like xyz/*


Undoing working directory changes:
And taking changes from repository.

git checkout -- index.html

-- indicates that we are not checking out a new branch instead we are take update from current branch.

as git checkout is also used to take branch checkout.

lets say we have a folder in current branch named as resources and if we do
git checkout resources
then git checks that whether a branch exists named as resources? if yes then git will take checkout of new branch instead of taking update of current branch folder named as resources.

so we could do is:
git checkout -- resources
to take update of current branch only.

It will download file from git repository and will remove local working directory file/folder


Unstaging files:
i.e. removing changes from staging index and keep that changes in working directory.

git reset HEAD fileName.txt 
git status 
will now give you that fileName.txt changes are not staged. and the file is modified: (in red)


Amending commits:
You can edit the last/latest commit where HEAD points to.
You can't edit any other commits as it will break git integraty.

last commit can be changed using amend option.
 
so if you want to add some more commits to last commit. OR
if you want to update commit message you can do it via ammend.
like, bring a file to staging index and perform commit with amend.

git commit --amend -m "Message"
this will include the staging file to previous commit. instead of a new commit.

Of don't stage anything to index and to update the commit message you can do
git commit --amend -m "Updated message"

git log -> to see updated message in the commit.


Retrieving old versions:

git log 
to see the previous commits (also to take the SHA code)

copy SHA code of the commit you want to revert. (10-12 chars enough to copy)

git checkout 2351edg7458 -- fileName.txt

git status 
will show you that file is now moved into staging index from repo.

git diff --staged
to see the difference between stage and working directory. 
/*
git reset HEAD fileName.txt 
to put file in working directory 
git checkout --fileName.txt 
*/

Reverting a commit:
Revert command.

Anything that is modified will be changed to its previous state.
i.e if anything is added it is now deleted or if anything is deleleted will be added as a result of this revert command.

git revert ds526745scg
only this single step will do all revert for you

it is good if things are simple, i.e reverting a single or set of files.
But if things gets complex like files are moved or renamed then git has provided a set of rules.
which is just like merging.


Using reset to undo commits:
caution required to use this command.
git reset
allows you to specify where HEAD pointer should point to.

git reset always moved the HEAD pointer. 

--soft 
	does not change staging index or working directory.
--mixed(default)
	moves the HEAD pointer to specified commit and changes the staging index to match repository
	does not change working directory.
--hard
	moves the HEAD pointer to specified commit and changes staging index and working directory to match repository.
	
	
Demonstrating a soft reset:

cat .git/HEAD
will return:- ref: refs/heads/master
cat .git/refs/heads/master
will return:- 5c86abd1fb3844 (SHA code)

git reset --soft da38660bbcd206
with this command we are moving the head pointer from 5c86abd1fb3844 to da38660bbcd206. 
i.e moving the head pointer from latest commit to previous commits.

and now if you do 
cat .git/refs/heads/master
will return:- da38660bbcd206 
as head now points to this commit.

git log 
will also show you latest commit is da38660bbcd206.

git status
will show you that in staging index and working directory -- the files are in latest modified state. 
i.e we still have our changes at staging index and working directory.

You can now record a new commit and it will commit over the previous latest commit.(though the previous latest commit content will be ignored by git)

or you can point the HEAD pointer to point back to the latest commit.

git reset --soft 5c86abd1fb3844

git status.

soft reset is safest as nothing is removed from staging or working dir.


Demonstrating a mixed reset

just like soft reset just it will update staging index also with the repository.

git reset --mixed da38660bbcd206

Demonstrating a hard reset
Most destructive, as repo, staging and working are same after reset

git reset --hard da38660bbcd206

git reset --hard 5c86abd1fb3844
this latest commit was not deleted or removed and if we want we can again go to this pointer.

this might be taken by the garbage collector if we don't access to it for a long time.


Removing untracked files:
git clean 
to remove all extra files that you don't want to go to repo.

git clean -n 
tells you wat all files will it remove.

git clean -f
will remove files only from working directory and not from stagin index

   
Using .gitignore files:
some log files that are constantly changing should be ignored.
there are many other temp files or data files that we don't want to send to repo.

create a special file at the root of our project or root of our working directory as .gitignore
project/.gitignore

this file contains set of rules for git to know which files to include for commit or which files to ignore.

can use very basic regular expressions

* ? [aeiou] [0-9]
negate expressions with !

*.php	-> ignore any file that ends with .php
!index.php -> but not ignore index.php
so other php files are not tracked but index.php files are tracked

ignore all files in a directory with trailing slash
assets/videos/
so all files in videos are ignored

comment lines begin with #
blank lines are skipped.

open NotePad or ++
and save as a file with type as all and give it name as .gitignore


or in git bash type 
nano .gitignore
it will create a new file called .gitignore
and will open the file for you, you can type things and can save by using Ctrl + what ever is suggested by screen.


log/*.log	-> will ignore all files end with .log in log directory.

assets/videos/	-> ignore all videos in videos folder.
!assets/videos/tour_*.mp4	-> don't ignore videos in videos floder which starts with tour_ and ends with .mp4

log/archive/access.log -> will not be ignored as a result of log/*.log 


Understanding what to ignore:
following files should be ignored:
compiled source code.
logs and databases
OS generated files.
user-uplodaed assets.

as above files are not related to project so ignore them.

for java you can ignore following files:
*.class

# Package Files
*.jar
*.war
*.ear

for windows os these files can be ignored
# Windows image file caches
Thumbs.db

#Folder config file
Desktop.ini

#Recycle Bin used on file shares
$RECYCLE.BIN/


Ignoring files globally:
-ignore files in all repositories.
-settings not tracked in repository, they are not part of repo but are part of git config and not project config.
-user specifc instead of repository-specifc

so these are local files specific to user. and not shared with anyone else

it is done by:
git config --global core.excludesfile ~/.gitignore_glbal  


git config --global core.excludesfile /Users/p639954/.gitignore_global  

where ~ is for unix command for full path.

and .gitignore_global is the file name containing files to be ignored at global level


Ignoring tracked files:
If you have already committed a file and now git has started tracking that file. But then you create a .gitignore file and add this file to gitignore so that git don't track it.
But since the file was committed before creating .gitignore file git will keep tracking the changes of the file.

How to ignore this file than?
best way to edit .gitignore file is to do it from command prompt by:
nano .gitignore


first thing is to tell git to stop tracking it, by removing that file:
git rm tempfile2.txt

but if we don't want to remove this file than:
git rm --cached tempfile2.txt
it will remove the file from staging index but the file stays in repo.
now the file will be stoped being tracked. with a copy in repo and working directory.

git status
will show that the file is deleted but if you see working directory you will still find that file there.

git commit -m "Removed tempfile2.txt from staging index"

 
Tracking empty directories:
git does not track empty directory, git only tracks files and directories that take git to that file.
i.e if you add an empty directory in the working directory then git will not find it untill you put some file in this folder.

so to track an empty directory you have to cheat git by putting a small file in there like .gitignore or .gitkeep

normally create a .gitkeep file.


Referencing commits:

tree-ish
is just something points out a commit.
full SHA-1 hash
short SHA-1 hash
	at least 4 chars
	unambigous(8-10 chars)
HEAD pointer 
branch refrence
ancestry
	parent commit 
	-HEAD^, acf87504^, master^
	carrot is pointing up.
	-HEAD~1, HEAD~
		HEAD~1 means we are going back 1 point. HEAD~ means same.
	Above all methods are to refer the parent commit of the HEAD.
	
	grandparent commit
	-HEAD^^, acf87504^^, master^^
	-HEAD~2
	great-grandparent commit
	-HEAD^^^, acf87504^^^, master^^^
	-HEAD~3
	
ls -la works with Windows Git Bash as well.


git ls-tree HEAD
will show you all the files in the head in the reop directory

git ls-tree master
same output as above command.

git ls-tree master directoryName/
will show all the files in directoryName

git ls-tree master^ directoryName/
will show directory in previous state

blob is any file saved in repo.
tree is a directory.

Getting more from the commit log:

If the content to show on GIT Bash is very large then you see 
:
in the end of file.
and if you press SPACE then more content is shown to you.
and then : changes to (END)
now press q to exit.

git log --oneline
all commits are compressed in single one line.

git log --oneline -3 
will show only last 3 commits

git log --since="2019-05-01"
all commits since May first.

git log --after="2019-05-01"
same as since

git log --until="2019-05-01"
all commits till this date.
git log --before="2019-05-01"
same as until

git log --since="1 weeks ago" --until="1 days ago"
and you will get output as desired.

git log --since="1.weeks" --until="1.days"
same thing

search by author
git log --author="Vikas"


grep -> global regular expressions search.
git log --grep="temp"
you will see all commits, message having temp keyword.

nice to see all the commits for certain topic or defect id or story id


git log --2907d12..acf8750 --oneline
to see all the commits between above two SHA codes.

	
to see what happened to a perticular file from any given commit till today:

git log c4b913.. index.html
SHA code not given after .. and then given file name.
all the logs that affected this file will be shown. very specific commits will be shown.

git log -p
to get more info for the commit.
and it shows a diff about what changed in the files regarding that commit.

git log -p c4b913.. index.html
will show commits applied to this file also will show what changes were in this file.










